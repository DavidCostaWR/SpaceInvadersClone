
// FILE: GameCore.cs

using SpaceInvaders.Game.Domain;
using SpaceInvaders.Game.Graphics;
using SpaceInvaders.Game.Entities;
using SpaceInvaders.Game.Managers;
using SpaceInvaders.Game.Input;

namespace SpaceInvaders.Game
{
    public enum GameState
    {
        Playing,
        Paused,
        GameOver,
        Victory
    }

    public class GameCore
    {
        private readonly BulletManager _bulletManager;
        private readonly CollisionManager _collisionManager;
        private readonly UFOManager _ufoManager;

        private readonly AnimationController _invaderAnimator;
        private readonly InvaderShootingController _invaderShootingController;

        private readonly InvaderFormation _invaderFormation;
        private readonly Player _player;

        private GameState _state = GameState.Playing;
        private int _score;
        private int _lives;

        public GameState State => _state;
        public int Score => _score;
        public int Lives => _lives;
        public IEnumerable<Invader> Invaders => _invaderFormation.Invaders;
        public int ActiveInvaders => _invaderFormation.ActiveCount;
        public int CurrentAnimationFrame => _invaderAnimator.CurrentFrame;
        public Player Player => _player;
        public UFO? CurrentUFO => _ufoManager.CurrentUFO;
        public IEnumerable<Bullet> Bullets => _bulletManager.Bullets;

        public GameCore(IInputHandler inputHandler)
        {
            if (inputHandler == null)
                throw new ArgumentNullException(nameof(inputHandler));

            // Initialize game objects
            _bulletManager = new BulletManager();
            _collisionManager = new CollisionManager();
            _ufoManager = new UFOManager();
            _invaderAnimator = new AnimationController(GameConstants.INVADER_ANIMATION_INTERVAL);
            _invaderShootingController = new InvaderShootingController(_bulletManager);

            _player = new Player(GameConstants.PlayerStartPosition, inputHandler);
            _invaderFormation = new InvaderFormation();

            _lives = GameConstants.PLAYER_LIVES;
            _score = 0;

            // Subscribe to game events
            _invaderFormation.InvaderDestroyed += OnInvaderDestroyed;
            _invaderFormation.ReachedBottom += OnInvadersReachedBottom;
            _player.FireRequested += OnPlayerFireRequested;
            _collisionManager.CollisionDetected += OnCollisionDetected;
            _player.DeathAnimationComplete += OnPlayerDeathAnimationComplete;
            _ufoManager.UFODestroyed += OnUFODestroyed;
        }

        public void Update(float deltaTime)
        {
            if (_state != GameState.Playing) return;

            // Update all game objects
            _invaderFormation.Update(deltaTime);
            _invaderAnimator.Update(deltaTime);
            _bulletManager.Update(deltaTime);
            _player.Update(deltaTime);
            _ufoManager.Update(deltaTime);

            // Update invader shooting
            _invaderShootingController.Update(deltaTime, _invaderFormation.Invaders);

            // Check collisions
            _collisionManager.CheckCollisions(
                _bulletManager.Bullets,
                _invaderFormation.Invaders,
                _player
                );

            CheckUFOCollisions();

            // Check victory condition
            if (_invaderFormation.ActiveCount == 0)
                _state = GameState.Victory;
        }

        private void CheckUFOCollisions()
        {
            if (_ufoManager.CurrentUFO == null) return;

            foreach (var bullet in _bulletManager.PlayerBullets.ToList())
            {
                if (bullet.Bounds.Intersects(_ufoManager.CurrentUFO.Bounds))
                {
                    _bulletManager.DestroyBullet(bullet);
                    _ufoManager.TryDestroyUFO(bullet.Position + bullet.Size / 2);
                    break;
                }
            }
        }

        private void HandlePlayerBulletHitInvader(Bullet? bullet, Invader? invader)
        {
            if (bullet == null || invader == null) return;

            _bulletManager.DestroyBullet(bullet);
            _invaderFormation.DestroyInvaderAt(invader.Position + invader.Size / 2);
        }

        private void HandleInvaderBulletHitPlayer(Bullet? bullet)
        {
            if (bullet == null) return;

            _bulletManager.DestroyBullet(bullet);

            if (_player.IsVulnerable)
            {
                _player.Hit();
                _lives--;
            }

            if (_lives <= 0)
                _state = GameState.GameOver;
        }

        private void OnCollisionDetected(object? sender, CollisionEventArgs e)
        {
            switch (e.Type)
            {
                case CollisionType.PlayerBulletHitInvader:
                    HandlePlayerBulletHitInvader(e.Entity1 as Bullet, e.Entity2 as Invader);
                    break;

                case CollisionType.InvaderBulletHitPlayer:
                    HandleInvaderBulletHitPlayer(e.Entity1 as Bullet);
                    break;
            }
        }

        private void OnPlayerDeathAnimationComplete(object? sender, EventArgs e)
        {
            if (_lives > 0)
                _player.Respawn(GameConstants.PlayerStartPosition);
        }

        private void OnInvaderDestroyed(object? sender, Invader invader)
        {
            _score += invader.PointValue;
        }

        private void OnInvadersReachedBottom(object? sender, EventArgs e)
        {
            _state = GameState.GameOver;
        }

        private void OnPlayerFireRequested(object? sender, EventArgs e)
        {
            // Calculate bullet spawn position (center-top of player)
            var bulletX = _player.Position.X + (_player.Size.X / 2) - 0.5f;
            var bulletY = _player.Position.Y - 1;

            var bulletPosition = new Vector2(bulletX, bulletY);

            if (_bulletManager.TryFirePlayerBullet(bulletPosition))
            {
                // Track shot for UFO scoring
                _ufoManager.OnPlayerShot();
            }
        }

        private void OnUFODestroyed(object? sender, UFO ufo)
        {
            _score += ufo.PointValue;
            // Could trigger special sound effect here
            Console.WriteLine($"UFO destroyed! Points: {ufo.PointValue}");
        }

        public void Reset()
        {
            _invaderFormation.Reset();
            _invaderAnimator.Reset();
            _bulletManager.Clear();
            _invaderShootingController.Reset();
            _ufoManager.Reset();

            _player.Position = GameConstants.PlayerStartPosition;

            _score = 0;
            _lives = GameConstants.PLAYER_LIVES;
            _state = GameState.Playing;
        }
    }
}


// FILE: GameForm.cs

using SpaceInvaders.Game.Domain;
using SpaceInvaders.Game.Entities;
using SpaceInvaders.Game.Graphics;
using SpaceInvaders.Game.Input;
using SpaceInvaders.Game.States;
using Timer = System.Windows.Forms.Timer;

namespace SpaceInvaders.Game
{
    public partial class GameForm : Form
    {
        private readonly Renderer _renderer;
        private readonly Timer _gameTimer;
        private readonly KeyboardInputHandler _inputHandler;
        private readonly GameCore _game;
        private readonly GameStateManager _stateManager;

        private DateTime _lastUpdate = DateTime.Now;

        public GameForm()
        {
            InitializeComponent();
            SetupWindow();

            _renderer = new Renderer();
            _inputHandler = new KeyboardInputHandler();
            _game = new GameCore(_inputHandler);
            _stateManager = new GameStateManager(_renderer, _game);

            SetupStates();

            // Enable key events
            KeyPreview = true;  // Form receives key events before controls

            // Setup game timer
            _gameTimer = new Timer();
            _gameTimer.Interval = GameConstants.FRAME_TIME_MS;
            _gameTimer.Tick += GameTimer_Tick;
            _gameTimer.Start();
        }

        private void SetupStates()
        {
            var startMenuState = new StartMenuState(() => { /* Game start logic */ });
            var playingState = new PlayingState(_game, _inputHandler);
            var pauseMenuState = new PauseMenuState();
            var gameOverState = new GameOverState(() => _game.Score);
            var victoryState = new VictoryState(() => _game.Score);

            _stateManager.RegisterState(startMenuState);
            _stateManager.RegisterState(playingState);
            _stateManager.RegisterState(pauseMenuState);
            _stateManager.RegisterState(gameOverState);
            _stateManager.RegisterState(victoryState);

            _stateManager.StartWithState<StartMenuState>();
        }

        private void SetupWindow()
        {
            Text = "Space Invaders";
            BackColor = Color.Black;
            ClientSize = new Size(GameConstants.DISPLAY_WIDTH, GameConstants.DISPLAY_HEIGHT);
            FormBorderStyle = FormBorderStyle.FixedSingle;
            MaximizeBox = false;
            DoubleBuffered = true;
        }

        private void GameTimer_Tick(object? sender, EventArgs e)
        {
            Update();
            Invalidate(); // Triggers a repaint
        }

        protected override void OnKeyDown(KeyEventArgs e)
        {
            base.OnKeyDown(e);

            _inputHandler.KeyDown(e.KeyCode);
            _stateManager.HandleInput(e.KeyCode, true);

            // Prevent beep sound on spacebar
            if (e.KeyCode == Keys.Space)
                e.Handled = true;
        }

        protected override void OnKeyUp(KeyEventArgs e)
        {
            base.OnKeyUp(e);

            _inputHandler.KeyUp(e.KeyCode);
            _stateManager.HandleInput(e.KeyCode, false);
        }

        private void Update()
        {
            var now = DateTime.Now;
            var deltaTime = (float)(now - _lastUpdate).TotalSeconds;
            _lastUpdate = now;

            _stateManager.Update(deltaTime);
            _inputHandler.Update();

        }

        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);

            _renderer.Clear(Color.Black);

            _stateManager.Draw();

            // Present to screen
            var targetRect = new Domain.Rectangle(0, 0, ClientSize.Width, ClientSize.Height);
            _renderer.Present(e.Graphics, targetRect);
        }

        
        protected override void OnFormClosed(FormClosedEventArgs e)
        {
            base.OnFormClosed(e);
            _gameTimer.Stop();
            _renderer.Dispose();
        }
    }
}


// FILE: GameForm.Designer.cs

namespace SpaceInvaders.Game
{
    partial class GameForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.Text = "GameForm";
        }

        #endregion
    }
}

// FILE: Program.cs

namespace SpaceInvaders.Game
{
    internal static class Program
    {
        /// <summary>
        ///  The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            ApplicationConfiguration.Initialize();
            Application.Run(new GameForm());
        }
    }
}
